activityDataImputed$dateType <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
```
##### 2. Panel plot containing a time series plot
```{r}
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
```
---
# "Reproducible Research: Peer Assessment 1"
## Loading and preprocessing the data
```{r, echo = FALSE, results='hide', warning= FALSE, message=FALSE}
library(ggplot2)
library(scales)
library(Hmisc)
```
```{r, results='markup', warning=TRUE, message=TRUE}
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activityData <- read.csv('activity.csv')
```
##### 2. transform interval data
```{r}
#activityData$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
```
## What is mean total number of steps taken per day?
```{r}
stepByDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
```
##### 1. Make a histogram of total number of steps taken each day
```{r}
qplot(stepByDay, xlab = 'Total Steps per day', ylab = 'Frequency using binwith 500', binwidth=500)
```
##### 2. Calculate Mean  and median number of steps taken each day
```{r}
stepsByDayMean <- mean(stepByDay)
stepsByDayMedian <- median(stepsByDay)
```
* Mean: `r stepsByDayMean`
* Median:  `r stepsByDayMedian`
## What is the average daily activity pattern?
``` {r}
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
```
##### 1. Make a time series plot
```{r}
ggplot(data=averageStepsPerTimeBlock,aes(x=interval, y = meansteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
```
##### 2. The 5-minute interval that, on average, contains the maximum number of steps
```{r}
mostSteps <- which.max(averageStepsPerTimeBlock$meanSteps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerTimeBlock[mostSteps,'interval'])
```
* Most Steps at: `r timeMostSteps`
----
## Imputing missing values
##### 1. The total number of missing values in the dataset
```{r}
numMissingValues <- length(which(is.na(activityData$steps)))
```
* Number of missing values: `r numMissingValues`
##### 2. Devise a strategy for filling in all of the missing values in the dataset.
##### 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
```
##### 4. Make a histogram of the total number of steps taken each day
```{r}
stepsByDayImputed <- tapply(activityDataImputed$steps, activityDataImputed$date, sum)
qplot(stepsByDayImputed, xlab='Total steps per day (Imputed)', ylab='Frequency using binwith 500', binwidth=500)
```
##### ... and Calculate and report the mean and median total number of steps taken per day.
```{r}
stepsByDayMeanImputed <- mean(stepsByDayImputed)
stepsByDayMedianImputed <- median(stepsByDayImputed)
```
* Mean (Imputed): `r stepsByDayMeanImputed`
* Median (Imputed):  `r stepsByDayMedianImputed`
-----
## Are there differences in activity patterns between weekdays and weekends?
##### 1. Create a new factor variable in the dataset with two levels ??? ???weekday??? and ???weekend??? indicating whether a given date is a weekday or weekend day.
```{r}
activityDataImputed$dateType <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
```
##### 2. Panel plot containing a time series plot
```{r}
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
```
---
# "Reproducible Research: Peer Assessment 1"
## Loading and preprocessing the data
```{r, echo=FALSE, results='hide', warning= FALSE, message=FALSE}
library(ggplot2)
library(scales)
library(Hmisc)
```
```{r, results='markup', warning=TRUE, message=TRUE}
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activityData <- read.csv('activity.csv')
```
##### 2. transform interval data
```{r}
activityData$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
```
## What is mean total number of steps taken per day?
```{r}
stepByDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
```
##### 1. Make a histogram of total number of steps taken each day
```{r}
qplot(stepByDay, xlab = 'Total Steps per day', ylab = 'Frequency using binwith 500', binwidth=500)
```
##### 2. Calculate Mean  and median number of steps taken each day
```{r}
stepsByDayMean <- mean(stepByDay)
stepsByDayMedian <- median(stepsByDay)
```
* Mean: `r stepsByDayMean`
* Median:  `r stepsByDayMedian`
## What is the average daily activity pattern?
``` {r}
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
```
##### 1. Make a time series plot
```{r}
ggplot(data=averageStepsPerTimeBlock,aes(x=interval, y = meansteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
```
##### 2. The 5-minute interval that, on average, contains the maximum number of steps
```{r}
mostSteps <- which.max(averageStepsPerTimeBlock$meanSteps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerTimeBlock[mostSteps,'interval'])
```
* Most Steps at: `r timeMostSteps`
----
## Imputing missing values
##### 1. The total number of missing values in the dataset
```{r}
numMissingValues <- length(which(is.na(activityData$steps)))
```
* Number of missing values: `r numMissingValues`
##### 2. Devise a strategy for filling in all of the missing values in the dataset.
##### 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
```
##### 4. Make a histogram of the total number of steps taken each day
```{r}
stepsByDayImputed <- tapply(activityDataImputed$steps, activityDataImputed$date, sum)
qplot(stepsByDayImputed, xlab='Total steps per day (Imputed)', ylab='Frequency using binwith 500', binwidth=500)
```
##### ... and Calculate and report the mean and median total number of steps taken per day.
```{r}
stepsByDayMeanImputed <- mean(stepsByDayImputed)
stepsByDayMedianImputed <- median(stepsByDayImputed)
```
* Mean (Imputed): `r stepsByDayMeanImputed`
* Median (Imputed):  `r stepsByDayMedianImputed`
-----
## Are there differences in activity patterns between weekdays and weekends?
##### 1. Create a new factor variable in the dataset with two levels ??? ???weekday??? and ???weekend??? indicating whether a given date is a weekday or weekend day.
```{r}
activityDataImputed$dateType <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
```
##### 2. Panel plot containing a time series plot
```{r}
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
```
---
# "Reproducible Research: Peer Assessment 1"
## Loading and preprocessing the data
```{r, echo=FALSE, results='hide', warning= FALSE, message=FALSE}
library(ggplot2)
library(scales)
library(Hmisc)
```
```{r, results='markup', warning=TRUE, message=TRUE}
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activityData <- read.csv('activity.csv')
```
##### 2. transform interval data
```{r}
activityData$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
```
## What is mean total number of steps taken per day?
```{r}
stepByDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
```
##### 1. Make a histogram of total number of steps taken each day
```{r}
qplot(stepByDay, xlab = 'Total Steps per day', ylab = 'Frequency using binwith 500', binwidth=500)
```
##### 2. Calculate Mean  and median number of steps taken each day
```{r}
stepsByDayMean <- mean(stepByDay)
stepsByDayMedian <- median(stepsByDay)
```
* Mean: `r stepsByDayMean`
* Median:  `r stepsByDayMedian`
## What is the average daily activity pattern?
``` {r}
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
```
##### 1. Make a time series plot
```{r}
ggplot(data=averageStepsPerTimeBlock,aes(x=interval, y = meansteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
```
##### 2. The 5-minute interval that, on average, contains the maximum number of steps
```{r}
mostSteps <- which.max(averageStepsPerTimeBlock$meanSteps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerTimeBlock[mostSteps,'interval'])
```
* Most Steps at: `r timeMostSteps`
----
## Imputing missing values
##### 1. The total number of missing values in the dataset
```{r}
numMissingValues <- length(which(is.na(activityData$steps)))
```
* Number of missing values: `r numMissingValues`
##### 2. Devise a strategy for filling in all of the missing values in the dataset.
##### 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
```
##### 4. Make a histogram of the total number of steps taken each day
```{r}
stepsByDayImputed <- tapply(activityDataImputed$steps, activityDataImputed$date, sum)
qplot(stepsByDayImputed, xlab='Total steps per day (Imputed)', ylab='Frequency using binwith 500', binwidth=500)
```
##### ... and Calculate and report the mean and median total number of steps taken per day.
```{r}
stepsByDayMeanImputed <- mean(stepsByDayImputed)
stepsByDayMedianImputed <- median(stepsByDayImputed)
```
* Mean (Imputed): `r stepsByDayMeanImputed`
* Median (Imputed):  `r stepsByDayMedianImputed`
-----
## Are there differences in activity patterns between weekdays and weekends?
##### 1. Create a new factor variable in the dataset with two levels ??? ???weekday??? and ???weekend??? indicating whether a given date is a weekday or weekend day.
```{r}
activityDataImputed$dateType <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
```
##### 2. Panel plot containing a time series plot
```{r}
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
```
# "Reproducible Research: Peer Assessment 1"
## Loading and preprocessing the data
```{r, echo=FALSE, results='hide', warning= FALSE, message=FALSE}
library(ggplot2)
library(scales)
library(Hmisc)
```
```{r, results='markup', warning=TRUE, message=TRUE}
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activityData <- read.csv('activity.csv')
```
##### 2. transform interval data
```{r}
activityData$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
```
## What is mean total number of steps taken per day?
```{r}
stepByDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
```
##### 1. Make a histogram of total number of steps taken each day
```{r}
qplot(stepByDay, xlab = 'Total Steps per day', ylab = 'Frequency using binwith 500', binwidth=500)
```
##### 2. Calculate Mean  and median number of steps taken each day
```{r}
stepsByDayMean <- mean(stepByDay)
stepsByDayMedian <- median(stepsByDay)
```
* Mean: `r stepsByDayMean`
* Median:  `r stepsByDayMedian`
## What is the average daily activity pattern?
``` {r}
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
```
##### 1. Make a time series plot
```{r}
ggplot(data=averageStepsPerTimeBlock,aes(x=interval, y = meansteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
```
##### 2. The 5-minute interval that, on average, contains the maximum number of steps
```{r}
mostSteps <- which.max(averageStepsPerTimeBlock$meanSteps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerTimeBlock[mostSteps,'interval'])
```
* Most Steps at: `r timeMostSteps`
----
## Imputing missing values
##### 1. The total number of missing values in the dataset
```{r}
numMissingValues <- length(which(is.na(activityData$steps)))
```
* Number of missing values: `r numMissingValues`
##### 2. Devise a strategy for filling in all of the missing values in the dataset.
##### 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
```
##### 4. Make a histogram of the total number of steps taken each day
```{r}
stepsByDayImputed <- tapply(activityDataImputed$steps, activityDataImputed$date, sum)
qplot(stepsByDayImputed, xlab='Total steps per day (Imputed)', ylab='Frequency using binwith 500', binwidth=500)
```
##### ... and Calculate and report the mean and median total number of steps taken per day.
```{r}
stepsByDayMeanImputed <- mean(stepsByDayImputed)
stepsByDayMedianImputed <- median(stepsByDayImputed)
```
* Mean (Imputed): `r stepsByDayMeanImputed`
* Median (Imputed):  `r stepsByDayMedianImputed`
-----
## Are there differences in activity patterns between weekdays and weekends?
##### 1. Create a new factor variable in the dataset with two levels ??? ???weekday??? and ???weekend??? indicating whether a given date is a weekday or weekend day.
```{r}
activityDataImputed$dateType <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
```
##### 2. Panel plot containing a time series plot
```{r}
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
```
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activityData <- read.csv('activity.csv')
library(ggplot2)
library(scales)
library(Hmisc)
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activityData <- read.csv('activity.csv')
activityData$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
activityData$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
stepByDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
qplot(stepByDay, xlab = 'Total Steps per day', ylab = 'Frequency using binwith 500', binwidth=500)
stepsByDayMean <- mean(stepByDay)
stepsByDayMedian <- median(stepsByDay)
stepsByDayMean <- mean(stepByDay)
stepsByDayMedian <- median(stepByDay)
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
library(ggplot2)
library(scales)
library(Hmisc)
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activityData <- read.csv('activity.csv')
activityData$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
stepByDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
qplot(stepByDay, xlab = 'Total Steps per day', ylab = 'Frequency using binwith 500', binwidth=500)
stepsByDayMean <- mean(stepByDay)
stepsByDayMedian <- median(stepByDay)
meanstepsperday <- stepsByDay %>% summarise(average = mean(stepsperday,na.rm = TRUE),median=median(stepsperday,na.rm = TRUE))
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), y=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
library(ggplot2)
library(scales)
library(Hmisc)
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activityData <- read.csv('activity.csv')
activityData$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
stepByDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
qplot(stepByDay, xlab = 'Total Steps per day', ylab = 'Frequency using binwith 500', binwidth=500)
stepsByDayMean <- mean(stepByDay)
stepsByDayMedian <- median(stepByDay)
averageStepsPerTimeBlock <- group_by(activityData$steps, interval)
library(ggplot2)
library(scales)
library(Hmisc)
library(dplyr)
averageStepsPerTimeBlock <- group_by(activityData$steps, interval)
ggplot(data=averageStepsPerTimeBlock,aes(x=interval, y = meansteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
library(ggplot2)
library(scales)
library(Hmisc)
library(dplyr)
library(magrittr)
library(dplyr)
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", destfile = "activity.zip", mode="wb")
# unzip data and read
unzip("activity.zip")
stepdata <- read.csv("activity.csv", header = TRUE)
head(stepdata)
databydate <- stepdata %>% select(date, steps) %>% group_by(date) %>% summarize(tsteps= sum(steps)) %>%na.omit()
hist(databydate$tsteps, xlab = "Total daily Steps",main="Histogram of Total Steps by day", breaks = 20)
mean(databydate$tsteps)
median(databydate$tsteps)
library(ggplot2)
databyinterval <- stepdata%>% select(interval, steps) %>% na.omit() %>% group_by(interval) %>% summarize(tsteps= mean(steps))
ggplot(databyinterval, aes(x=interval, y=tsteps))+ geom_line()
databyinterval[which(databyinterval$tsteps== max(databyinterval$tsteps)),]
missingVals <- sum(is.na(data))
library(magrittr)
library(dplyr)
replacewithmean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
meandata <- stepdata%>% group_by(interval) %>% mutate(steps= replacewithmean(steps))
head(meandata)
oldmean <- mean(databydate$tsteps, na.rm = TRUE)
newmean <- mean(FullSummedDataByDay$totalsteps)
# Old mean and New mean
oldmean
library(ggplot2)
library(scales)
library(Hmisc)
library(dplyr)
library(magrittr)
library(dplyr)
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", destfile = "activity.zip", mode="wb")
# unzip data and read
unzip("activity.zip")
stepdata <- read.csv("activity.csv", header = TRUE)
head(stepdata)
databydate <- stepdata %>% select(date, steps) %>% group_by(date) %>% summarize(tsteps= sum(steps)) %>%na.omit()
hist(databydate$tsteps, xlab = "Total daily Steps",main="Histogram of Total Steps by day", breaks = 20)
mean(databydate$tsteps)
median(databydate$tsteps)
library(ggplot2)
databyinterval <- stepdata%>% select(interval, steps) %>% na.omit() %>% group_by(interval) %>% summarize(tsteps= mean(steps))
ggplot(databyinterval, aes(x=interval, y=tsteps))+ geom_line()
databyinterval[which(databyinterval$tsteps== max(databyinterval$tsteps)),]
missingVals <- sum(is.na(data))
library(magrittr)
library(dplyr)
replacewithmean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
meandata <- stepdata%>% group_by(interval) %>% mutate(steps= replacewithmean(steps))
head(meandata)
hist(FullSummedDataByDay$totalsteps, xlab = "Steps", ylab = "Frequency", main = "Total Daily Steps", breaks = 20)
FullSummedDataByDay <- aggregate(meandata$steps, by=list(meandata$date), sum)
names(FullSummedDataByDay)[1] ="date"
names(FullSummedDataByDay)[2] ="totalsteps"
head(FullSummedDataByDay,15)
summary(FullSummedDataByDay)
hist(FullSummedDataByDay$totalsteps, xlab = "Steps", ylab = "Frequency", main = "Total Daily Steps", breaks = 20)
oldmean <- mean(databydate$tsteps, na.rm = TRUE)
newmean <- mean(FullSummedDataByDay$totalsteps)
# Old mean and New mean
oldmean
newmean
meandata$date <- as.Date(meandata$date)
meandata$weekday <- weekdays(meandata$date)
meandata$weekend <- ifelse(meandata$weekday=="Saturday" | meandata$weekday=="Sunday", "Weekend", "Weekday" )
library(ggplot2)
meandataweekendweekday <- aggregate(meandata$steps , by= list(meandata$weekend, meandata$interval), na.omit(mean))
names(meandataweekendweekday) <- c("weekend", "interval", "steps")
ggplot(meandataweekendweekday, aes(x=interval, y=steps, color=weekend)) + geom_line()+
facet_grid(weekend ~.) + xlab("Interval") + ylab("Mean of Steps") +
ggtitle("Comparison of Average Number of Steps in Each Interval")
getwd()
setwd("C:\Users\kuldeep.singh.meena\Downloads\R-Data\course5_reproducible_search\week2\assignment\RepData_PeerAssessment1")
setwd("/Users/kuldeep.singh.meena/Downloads/R-Data/course5_reproducible_search/week2/assignment/RepData_PeerAssessment1")
getwd()
library("knitr")
knit2html("PA1_template.Rmd")
